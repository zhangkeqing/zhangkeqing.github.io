[{"title":"redis 学习（三）","date":"2017-03-21T10:46:42.000Z","path":"2017/03/21/redis-学习（三）/","text":"redis集群节点的动态配置1. 集群几点的增加上一节中我们只集群了两台机器中的节点192.168.1.107 和 192.168.1.108，还剩下一台中的三个节点，我们要将其加入节点中 192.168.1.109 首先我们要保证节点都是启动状态123456# 进入节点目录$ cd /usr/local/redis_cluster/# 启动节点$ redis-server 7006/redis.conf$ redis-server 7007/redis.conf$ redis-server 7008/redis.conf 执行以下命令，将这个新节点添加到集群中123$ /usr/local/redis/src/redis-trib.rb add-node 192.168.1.109:7006 192.168.1.107:7000# 执行下面命令查看刚才新增的节点$ redis-cli -c -h 192.168.1.107 -p 7000 cluster nodes 接下来把剩下的两个节点也加入集群中,并查看结果12$ /usr/local/redis/src/redis-trib.rb add-node 192.168.1.109:7007 192.168.1.107:7000$ /usr/local/redis/src/redis-trib.rb add-node 192.168.1.109:7008 192.168.1.107:7000 增加了新的节点之后发现，这些新的节点默认都是master主节点我们将192.168.1.109:7007设为主节点，192.168.1.109:7006,192.168.1.109:7008作为7007的从节点123$ redis-cli -c -h 192.168.1.109 -p 7006 cluster replicate 4e26a7ddofed041b676ee05686cafff6343bffd$ redis-cli -c -h 192.168.1.109 -p 7007 cluster replicate 4e26a7ddofed041b676ee05686cafff6343bffd#在这个命令中前面的-h 和 -p 表示将该节点作为从节点，后面的那个ID则是主节点192.168.1.109:7007的ID 查看结果 我们发现新增的192.168.1.109：7007主节点中没有哈希槽，我们需要进行分配：1$ /usr/local/redis/src/redis-trib.rb reshard 192.168.1.107:7000","tags":[{"name":"redis,redis集群，redis集群配置","slug":"redis-redis集群，redis集群配置","permalink":"http://yoursite.com/tags/redis-redis集群，redis集群配置/"}]},{"title":"redis 学习（二）","date":"2017-03-21T10:46:35.000Z","path":"2017/03/21/redis-学习（二）/","text":"redis 集群安装1. 集群环境我准备将redis安装在三台机器上：123192.168.1.107192.168.1.108192.168.1.109 我是在用VirtualBox本地建立了三个CentOS7虚拟机 2. 安装redis2.1 分别在三台机器中安装resia首先在 192.168.1.107 中安装，并创建节点1234567891011121314151617181920212223242526272829$ cd /usr/local#创建节点安装目录$ mkdir redis_cluster# 解压$ tar -zxvf redis-3.2.8.tar.gz# 重命名$ mv redis-3.2.8/ redis$ cd redis/# 安装$ make install PREFIX=/usr/local/redis_cluster$ cd ../redis_cluster# 此时目录下有bin目录，同时查看/usr/local/bin下面是否存在redis相关文件，如果没有则复制bin下的问下到/usr/local/bin目录中$ cp bin/* /usr/local/bin# 创建redis节点$ mkdir 7000 7001 7002#复制redis.conf到节点下$ cp /usr/local/redis/redis.conf ./7000/$ cp /usr/local/redis/redis.conf ./7001/$ cp /usr/local/redis/redis.conf ./7002/# 修改对应配置# 对redis.conf进行配置daemonize yes //redis后台运行pidfile /var/run/redis_7000.pid //pidfile文件对应7000,7001,7002bind 192.168.1.107 // 如果不进行多机器集群搭建 可以不配置port 7000 //端口7000,7001,7002cluster-enabled yes //开启集群 把注释#去掉cluster-config-file nodes_7000.conf //集群的配置 配置文件首次启动自动生成 7000,7001,7002cluster-node-timeout 5000 //请求超时 设置5秒够了appendonly yes //aof日志开启 有需要就开启，它会每次写操作都记录一条日志 同时在 192.168.1.108 和 192.168.1.109 两台机器中分别配置节点：7003、7004、7005 和 7006、7007、7008 总共九个节点，并进行相关配置 ==这里要注意：在搭建redis集群是必须保证节点在三个以上才可以== 123456789101112# 分别启动三台机器中的redis节点cd /usr/localredis-server redis_cluster/7000/redis.confredis-server redis_cluster/7001/redis.confredis-server redis_cluster/7002/redis.confredis-server redis_cluster/7003/redis.confredis-server redis_cluster/7004/redis.confredis-server redis_cluster/7005/redis.confredis-server redis_cluster/7006/redis.confredis-server redis_cluster/7007/redis.confredis-server redis_cluster/7008/redis.conf# 在哪个目录下启动节点，就会在在那个目录中生成相关的文件，查看/usr/local/目录的文件 2.2 集群搭建前面已经准备好了搭建集群的redis节点，接下来我们要把这些节点都串连起来搭建集群。官方提供了一个工具：redis-trib.rb(/usr/local/redis-3.2.8/src/redis-trib.rb) 看后缀就知道这鸟东西不能直接执行，它是用ruby写的一个程序，所以我们还得安装ruby.1$ yum -y install ruby ruby-devel rubygems rpm-build 再用 gem 这个命令来安装 redis接口 gem是ruby的一个工具包.12$ gem install redis //需要等一段时间# 当然，方便操作，三台机器都要安装。 上面安装完成后就可以执行集群的程序了redis-trib.rb确认所有的节点都启动，接下来使用参数create 创建 (在192.168.1.107中来创建)1$ /usr/local/redis/src/redis-trib.rb create --replicas 1 192.168.1.107:7000 192.168.1.107:7001 192.168.1.107:7002 192.168.1.108:7003 192.168.1.108:7004 192.168.1.108:7005 查看结果 这里我们先只集群两台机器上的redis,剩下一台中的节点接下来使用。 参数解释： –replicas 1 表示 自动为每一个master节点分配一个slave节点 上面有6个节点，程序会按照一定规则生成 3个master（主）3个slave(从) 前面已经提醒过的 防火墙一定要开放监听的端口，否则会创建失败。 最后查看结果，redis集群已经安装成功","tags":[{"name":"redis,redis集群搭建","slug":"redis-redis集群搭建","permalink":"http://yoursite.com/tags/redis-redis集群搭建/"}]},{"title":"redis 学习（一）","date":"2017-03-21T10:46:20.000Z","path":"2017/03/21/redis-学习（一）/","text":"Redis 安装1. redis下载首先去 redis： https://redis.io/ 官网下在redis软件，我安装使用的是最新稳定版redis-3.2.8下载链接：http://download.redis.io/releases/redis-3.2.8.tar.gz 2. redis 安装由于电脑是Windows的，想要使用Linux系统只能装虚拟记录，我的博客前面有介绍VirtualBox安装CentOS7，这里就不再多描述了。直接进行安装：1234567891011121314151617#首先把下载好的安装包拷贝到/usr/local/下cp redis-3.2.8 /usr/local/ cd /usr/local/#然后解压redis-3.2.8tar -zxvf redis-3.2.8.tar.gz#重命名mv redis-3.2.8/ redis# 创建redis编译安装目录mkdir redis_cluster# 将redis安装到刚才创建好的redis_cluster目录中#（这里也可以不选择，使用默认安装目录也可以，默认目录就是redis报下面会生成一个‘bin’目录）# 进入redis目录进行编译安装cd redis/make install PREFIX=/usr/local/redis_cluster/#上一步执行完毕后表示安装成功，但是官方推荐使用 make test 命令测试，是否真的安装成功make test#完成上述步骤说明没有报错说明redis已经安装成功。 当然在安装过程中可能遇到不能编译的问题，则需要安装gcc环境12yum install gccyum install gcc-c++ 3. 下面进行redis 运行测试安装12345678910111213141516171819202122232425262728293031#在redis_cluster中创建7000，7001，7002,mkdir -p /usr/local/redis_cluster/7000mkdir -p /usr/local/redis_cluster/7001mkdir -p /usr/local/redis_cluster/7002# 然后拷贝redis目录中redis.conf配置文件分别到新创建的三个目录中cp /usr/local/redis/redis.conf /usr/local/redis_cluster/7000/cp /usr/local/redis/redis.conf /usr/local/redis_cluster/7001/cp /usr/local/redis/redis.conf /usr/local/redis_cluster/7002/# 对redis.conf进行配置daemonize yes //redis后台运行pidfile /var/run/redis_7000.pid //pidfile文件对应7000,7001,7002bind 192.168.1.107 // 如果不进行多机器集群搭建 可以不配置port 7000 //端口7000,7001,7002cluster-enabled yes //开启集群 把注释#去掉cluster-config-file nodes_7000.conf //集群的配置 配置文件首次启动自动生成 7000,7001,7002cluster-node-timeout 5000 //请求超时 设置5秒够了appendonly yes //aof日志开启 有需要就开启，它会每次写操作都记录一条日志# 最后执行下面命令运行redis,#当然运行执行还要先查看/usr/local/bin目录中是否存在redis-server等redis的相关文件，#如果没有，可以将刚才安装到redis_cluster目录的的bin目录下的文件复制到/usr/local/bin/下面redis-server /usr/local/redis_cluster/7000/redis.confredis-server /usr/local/redis_cluster/7001/redis.confredis-server /usr/local/redis_cluster/7002/redis.conf#使用下面命令查看redis是否运行成功ps -ef|grep redis#结果root 2326 1 0 18:15 ? 00:00:25 redis-server 192.168.1.107:7000 [cluster]root 2330 1 0 18:16 ? 00:00:26 redis-server 192.168.1.107:7001 [cluster]root 2334 1 0 18:16 ? 00:00:21 redis-server 192.168.1.107:7002 [cluster]#说明redis已经安装并运行成功 下一节，我将会进行redis多机器集群的搭建","tags":[{"name":"redis,redis环境搭建","slug":"redis-redis环境搭建","permalink":"http://yoursite.com/tags/redis-redis环境搭建/"}]},{"title":"github + Hexo 搭建个人博客（四）","date":"2017-03-20T09:42:43.000Z","path":"2017/03/20/github-Hexo-搭建个人博客（四）/","text":"hexo 各项基本配置1. hexo-yilia主题的配置详情1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798# Headermenu: 主页: / 随笔: /tags/随笔/# SubNavsubnav: github: \"https://github.com/zhangkeqing/\" weibo: \"#\" // 个人微博设置 rss: \"#\" // rss订阅设置 #zhihu: \"#\" // 个人知乎设置 #qq: \"#\" // QQ帐号设置 #weixin: \"#\" // 微信 #jianshu: \"#\" // 简书 #douban: \"#\" // 豆瓣 mail: \"mailto:407066271@qq.com\" //邮箱 #facebook: \"#\" // 脸书 #google: \"#\" // 谷歌 #twitter: \"#\" #linkedin: \"#\"rss: /atom.xml# 是否需要修改 root 路径# 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，# 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。root: # Content# 文章太长，截断按钮文字excerpt_link: more# 文章卡片右下角常驻链接，不需要请设置为falseshow_all_link: '展开全文'# 数学公式mathjax: false# 是否在新窗口打开链接open_in_new: false# 打赏# 请在需要打赏的文章的md文件头部，设置属性reward: true# 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏reward_type: 2# 打赏wordingreward_wording: '谢谢你请我吃糖果'# 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpgalipay: # 微信二维码图片地址weixin: # Miscellaneousbaidu_analytics: ''google_analytics: ''favicon: /favicon.png#你的头像urlavatar: http://tvax4.sinaimg.cn/crop.64.0.1066.1066.180/902cf5a9ly8fdqzkx9q8cj21hc0u04im.jpg#是否开启分享share_jia: true#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论duoshuo: false# 样式定制 - 一般不需要修改，除非有很强的定制欲望…style: # 头像上面的背景颜色 header: '#4d4d4d' # 右滑板块背景 slider: 'linear-gradient(200deg,#a0cfe4,#e8c37e)'# slider的设置slider: # 是否默认展开tags板块 showTags: false# 智能菜单# 如不需要，将该对应项置为false# 比如#smart_menu:# friends: falsesmart_menu: innerArchive: '所有文章' friends: '友链' aboutme: '关于我'friends: 友情链接1: http://localhost:4000/ 友情链接2: http://localhost:4000/ 友情链接3: http://localhost:4000/ 友情链接4: http://localhost:4000/ 友情链接5: http://localhost:4000/ 友情链接6: http://localhost:4000/aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家 2. RSS 订阅配置首先安装插件：12$ npm install hexo-generator-feed$ npm install hexo-generator-sitemap 这里要注意，由于nodejs的软件安装源在国外所以这里可能会遇到hexo-generator-feed安装失败的可能，所以如果失败就要配置国内的镜像定制了： 我们使用的是国内淘宝的镜像地址淘宝npm镜像地址 12345678910111213#安装淘宝镜像$ npm install -g cnpm --registry=https://registry.npm.taobao.org#或者你直接通过添加 npm 参数 alias 一个新命令:alias cnpm=\"npm --registry=https://registry.npm.taobao.org \\--cache=$HOME/.npm/.cache/cnpm \\--disturl=https://npm.taobao.org/dist \\--userconfig=$HOME/.cnpmrc\"# Or alias it in .bashrc or .zshrc$ echo '\\n#alias for cnpm\\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\ --cache=$HOME/.npm/.cache/cnpm \\ --disturl=https://npm.taobao.org/dist \\ --userconfig=$HOME/.cnpmrc\"' &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc 从 registry.npm.taobao.org 安装所有模块. 当安装的时候发现安装的模块还没有同步过来, 淘宝 NPM 会自动在后台进行同步, 并且会让你从官方 NPM registry.npmjs.org 进行安装. 下次你再安装这个模块的时候, 就会直接从 淘宝 NPM 安装了.1$ cnpm install [name] 在全局配置文件_config.yml进行插件配置：12345678#插件配置plugins: hexo-generator-feed #- hexo-generator-sitemap feed: type: atom ##feed类型 atom或者rss2 path: atom.xml ##feed路径 limit: 20 ##feed文章最小数量 3. 开启标签页如果不开启标签页，点击博客上的随笔功能将会报错12345hexo new page tags#修改blog/source/tags/index.mdlayout: tagscomments: false--- 4. 开启分类页12345hexo new page categories#修改blog/source/categories/index.mdlayout: categoriescomments: false---","tags":[]},{"title":"github + Hexo 搭建个人博客（三）","date":"2017-03-18T06:22:58.000Z","path":"2017/03/18/github-Hexo-搭建个人博客（三）/","text":"首先我们在以前已经安装，并配置好Hexo了，现在看看如何部署到github中 1. Hexo 博客部署1.1 _config.yml 配置文件中的配置之前我们已经配置过了：123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com/zhangkeqing/zhangkeqing.github.io.git branch: master 1.2 部署之前需要安装一个hexo git扩展1234$ npm install hexo-deployer-git --save#执行下面命令就可以部署了$ hexo d -g 但是在实际执行过程中遇到了错误1FATAL fatal: 'git@github.com/zhangkeqing/zhangkeqing.github.io.git' does not appear to be a git repository 错误原因：将 “git@” 改为 “https://&quot;就对啦 2. 如何在Hexo中的文章中使用本地图片解决方案：CodeFalling/hexo-asset-image。 首先确认 _config.yml 中有 post_asset_folder:true 在 hexo 目录，执行1npm install https://github.com/CodeFalling/hexo-asset-image --save 安装成功后就可使用本地图片功能了。 如何使用：123# 创建一个文档hexo new \"testimage\"INFO Created: F:\\git\\hexo\\source\\_posts\\testimage.md 这时候你会发现在_posts目录中同时生成了testimage.md文件和testimage目录，这时只需要将想要使用的图片放到“testimage”目录下，然后在testimage.md文件中使用就可以了：1![测试图片](testimage/test.jpg) 最后页面中将会显示你的图片了。","tags":[]},{"title":"github + Hexo 搭建个人博客（二）","date":"2017-03-18T06:22:41.000Z","path":"2017/03/18/github-Hexo-搭建个人博客（二）/","text":"1. Hexo 主题设置1.1 首先要安装主题12$ hexo clean$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 1.2 在我们创建的hexo目录中找到 _config.yml 文件，进行配置：将 theme 配置项设置为 yilia1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#博客名称title: 我的博客#副标题subtitle: 一天进步一点#简介description: 记录生活点滴#博客作者author: John Doe#博客语言language: zh-CN#时区timezone:#博客地址,与申请的GitHub一致url: http://zhangkeqing.github.ioroot: /#博客链接格式permalink: :year/:month/:day/:title/permalink_defaults:source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:new_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace:default_category: uncategorizedcategory_map:tag_map:#日期格式date_format: YYYY-MM-DDtime_format: HH:mm:ss#分页，每页文章数量per_page: 10pagination_dir: page#博客主题，默认主题（landscape）theme: yilia#发布设置deploy: type: git #elfwalk改为你的github用户名 repository: git@github.com/zhangkeqing/zhangkeqing.github.io.git branch: master Repository：必须是SSH形式的url（git@github.com:zhchnchn/zhchnchn.github.io.git），而不能是HTTPS形式的url（https://github.com/zhchnchn/zhchnchn.github.io.git），否则会出现错误：123$ hexo deploy[info] Start deploying: github[error] https://github.com/zhangkeqing/zhangkeqing.github.io.git is not a valid repositor URL! 使用SSH url，如果电脑没有开放SSH 端口，会致部署失败。1234fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.","tags":[]},{"title":"Git安装使用（一）","date":"2017-03-18T06:19:19.000Z","path":"2017/03/18/Git安装使用（一）/","text":"1. 配置Git个人信息1.1. 设置Git的user name和email：(如果是第一次的话)12git config --global user.name \"zhangkeqing\"git config --global user.email \"xxx@qq.com\" 注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。2. 创建版本库2.1. 创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：1234$ mkdir learngit$ cd learngit$ pwd/data/git/learngit 3. 提交文件3.2. 通过 git init 命令把这个目录变成Git可以管理的仓库：12$ git initInitialized empty Git repository in /data/git/learngit/.git/ 3.3. 编写一个README.txt ，填入一些内容：12Git is a version control systemGit is free software 3.4 用命令git add告诉Git，把文件添加到仓库：1$ git add README.txt 在windows环境下出现下面错误： warning: LF will be replaced by CRLF in README.md 解决方法：(删除刚才生成的.git,并进行配置) $ rm -rf .git $ git config –global core.autocrlf false 然后重新执行2.2步骤中的方法 3.5 用命令git commit告诉Git，把文件提交到仓库：1$ git commit -m \"wrote a readme file\" [master (root-commit) 61f2a5a] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 README.txt 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。嫌麻烦不想输入-m &quot;xxx&quot;行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。git commit命令执行成功后会告诉你，1个文件被改动（我们新添加的readme.txt文件），插入了两行内容（readme.txt有两行内容）。为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：123$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m \"add 3 files.\"","tags":[]},{"title":"github + Hexo 搭建个人博客（一）","date":"2017-03-18T06:13:51.000Z","path":"2017/03/18/github-Hexo-搭建个人博客（一）/","text":"1. 环境配置1.1 安装Git环境 可以查看 Git安装使用 1.2 安装NodeJs环境可以查看 NodeJs安装使用 2. 环境配置好以后，可以进行博客的搭建了2.1 安装Hexo首先在系统中创建一个Hexo目录12# -p 表示递归创建目录$ mkdir -p /data/hexo/ 然后进入目录，安装hexo环境：12345678910$ cd /data/hexo/$ npm install hexo-cli -g# 初始化hexo$ hexo init hexo # 如果已经存在 hexo 目录，则直接使用 hexo init 命令就可以了$ cd hexo# 安装生成器$ npm install$ hexo $ hexo g # 或者hexo generate 生成$ hexo s # 启动本地web服务器 server，可以在http://localhost:4000/ 查看 这里有必要提下Hexo常用的几个命令： hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹 hexo server (hexo s) 启动本地web服务，用于博客的预览 hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）另外还有其他几个常用命令：12$ hexo new \"postName\" #新建文章$ hexo new page \"pageName\" #新建页面 常用简写:1234$ hexo n == hexo new$ hexo g == hexo generate$ hexo s == hexo server$ hexo d == hexo deploy 常用组合：12$ hexo d -g #生成部署$ hexo s -g #生成预览 现在我们打开http://localhost:4000/ 已经可以看到一篇内置的blog了。","tags":[]},{"title":"Hello World","date":"2017-03-13T11:55:32.702Z","path":"2017/03/13/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]